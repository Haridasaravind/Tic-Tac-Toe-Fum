function cov_1vngzsz3fq(){var path="D:\\Development\\Tic TacToe Fum\\Backend\\Server.js";var hash="c649560da664b8753ad0774585baa1781016175d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Development\\Tic TacToe Fum\\Backend\\Server.js",statementMap:{"0":{start:{line:2,column:16},end:{line:2,column:34}},"1":{start:{line:3,column:19},end:{line:3,column:41}},"2":{start:{line:4,column:13},end:{line:4,column:28}},"3":{start:{line:5,column:12},end:{line:5,column:21}},"4":{start:{line:6,column:13},end:{line:6,column:17}},"5":{start:{line:9,column:12},end:{line:13,column:1}},"6":{start:{line:15,column:20},end:{line:15,column:23}},"7":{start:{line:16,column:13},end:{line:16,column:15}},"8":{start:{line:17,column:13},end:{line:17,column:14}},"9":{start:{line:18,column:13},end:{line:18,column:14}},"10":{start:{line:26,column:20},end:{line:77,column:1}},"11":{start:{line:28,column:2},end:{line:37,column:3}},"12":{start:{line:28,column:15},end:{line:28,column:16}},"13":{start:{line:29,column:4},end:{line:36,column:5}},"14":{start:{line:31,column:31},end:{line:31,column:66}},"15":{start:{line:33,column:27},end:{line:33,column:66}},"16":{start:{line:35,column:6},end:{line:35,column:45}},"17":{start:{line:40,column:2},end:{line:49,column:3}},"18":{start:{line:42,column:32},end:{line:42,column:79}},"19":{start:{line:45,column:22},end:{line:45,column:113}},"20":{start:{line:48,column:4},end:{line:48,column:43}},"21":{start:{line:52,column:2},end:{line:74,column:3}},"22":{start:{line:53,column:25},end:{line:53,column:36}},"23":{start:{line:56,column:4},end:{line:63,column:5}},"24":{start:{line:62,column:6},end:{line:62,column:46}},"25":{start:{line:66,column:4},end:{line:73,column:5}},"26":{start:{line:72,column:6},end:{line:72,column:46}},"27":{start:{line:76,column:2},end:{line:76,column:12}},"28":{start:{line:82,column:20},end:{line:101,column:1}},"29":{start:{line:83,column:25},end:{line:83,column:79}},"30":{start:{line:83,column:46},end:{line:83,column:78}},"31":{start:{line:83,column:66},end:{line:83,column:77}},"32":{start:{line:85,column:2},end:{line:100,column:3}},"33":{start:{line:89,column:21},end:{line:89,column:71}},"34":{start:{line:89,column:53},end:{line:89,column:70}},"35":{start:{line:92,column:4},end:{line:96,column:5}},"36":{start:{line:92,column:17},end:{line:92,column:18}},"37":{start:{line:93,column:6},end:{line:95,column:7}},"38":{start:{line:93,column:19},end:{line:93,column:20}},"39":{start:{line:94,column:8},end:{line:94,column:37}},"40":{start:{line:99,column:4},end:{line:99,column:21}},"41":{start:{line:106,column:18},end:{line:114,column:1}},"42":{start:{line:107,column:2},end:{line:111,column:4}},"43":{start:{line:112,column:2},end:{line:112,column:22}},"44":{start:{line:113,column:2},end:{line:113,column:14}},"45":{start:{line:117,column:0},end:{line:117,column:16}},"46":{start:{line:118,column:0},end:{line:118,column:27}},"47":{start:{line:126,column:0},end:{line:128,column:3}},"48":{start:{line:127,column:2},end:{line:127,column:46}},"49":{start:{line:137,column:0},end:{line:176,column:3}},"50":{start:{line:138,column:23},end:{line:138,column:31}},"51":{start:{line:140,column:20},end:{line:140,column:32}},"52":{start:{line:143,column:2},end:{line:175,column:3}},"53":{start:{line:144,column:4},end:{line:144,column:36}},"54":{start:{line:147,column:4},end:{line:147,column:36}},"55":{start:{line:150,column:24},end:{line:150,column:78}},"56":{start:{line:150,column:45},end:{line:150,column:77}},"57":{start:{line:150,column:65},end:{line:150,column:76}},"58":{start:{line:151,column:4},end:{line:169,column:5}},"59":{start:{line:153,column:6},end:{line:153,column:20}},"60":{start:{line:154,column:11},end:{line:169,column:5}},"61":{start:{line:156,column:6},end:{line:156,column:56}},"62":{start:{line:159,column:6},end:{line:163,column:7}},"63":{start:{line:160,column:8},end:{line:160,column:17}},"64":{start:{line:162,column:8},end:{line:162,column:17}},"65":{start:{line:164,column:6},end:{line:164,column:18}},"66":{start:{line:167,column:6},end:{line:167,column:42}},"67":{start:{line:168,column:6},end:{line:168,column:13}},"68":{start:{line:172,column:4},end:{line:172,column:32}},"69":{start:{line:174,column:4},end:{line:174,column:70}},"70":{start:{line:182,column:0},end:{line:185,column:3}},"71":{start:{line:183,column:2},end:{line:183,column:14}},"72":{start:{line:184,column:2},end:{line:184,column:30}},"73":{start:{line:187,column:0},end:{line:187,column:76}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:20},end:{line:26,column:21}},loc:{start:{line:26,column:35},end:{line:77,column:1}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:21},end:{line:31,column:22}},loc:{start:{line:31,column:31},end:{line:31,column:66}},line:31},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:18},end:{line:33,column:19}},loc:{start:{line:33,column:27},end:{line:33,column:66}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:16},end:{line:42,column:17}},loc:{start:{line:42,column:32},end:{line:42,column:79}},line:42},"4":{name:"(anonymous_4)",decl:{start:{line:45,column:6},end:{line:45,column:7}},loc:{start:{line:45,column:22},end:{line:45,column:113}},line:45},"5":{name:"(anonymous_5)",decl:{start:{line:82,column:20},end:{line:82,column:21}},loc:{start:{line:82,column:26},end:{line:101,column:1}},line:82},"6":{name:"(anonymous_6)",decl:{start:{line:83,column:37},end:{line:83,column:38}},loc:{start:{line:83,column:46},end:{line:83,column:78}},line:83},"7":{name:"(anonymous_7)",decl:{start:{line:83,column:56},end:{line:83,column:57}},loc:{start:{line:83,column:66},end:{line:83,column:77}},line:83},"8":{name:"(anonymous_8)",decl:{start:{line:89,column:47},end:{line:89,column:48}},loc:{start:{line:89,column:53},end:{line:89,column:70}},line:89},"9":{name:"(anonymous_9)",decl:{start:{line:106,column:18},end:{line:106,column:19}},loc:{start:{line:106,column:24},end:{line:114,column:1}},line:106},"10":{name:"(anonymous_10)",decl:{start:{line:126,column:18},end:{line:126,column:19}},loc:{start:{line:126,column:32},end:{line:128,column:1}},line:126},"11":{name:"(anonymous_11)",decl:{start:{line:137,column:18},end:{line:137,column:19}},loc:{start:{line:137,column:32},end:{line:176,column:1}},line:137},"12":{name:"(anonymous_12)",decl:{start:{line:150,column:36},end:{line:150,column:37}},loc:{start:{line:150,column:45},end:{line:150,column:77}},line:150},"13":{name:"(anonymous_13)",decl:{start:{line:150,column:55},end:{line:150,column:56}},loc:{start:{line:150,column:65},end:{line:150,column:76}},line:150},"14":{name:"(anonymous_14)",decl:{start:{line:182,column:19},end:{line:182,column:20}},loc:{start:{line:182,column:33},end:{line:185,column:1}},line:182}},branchMap:{"0":{loc:{start:{line:29,column:4},end:{line:36,column:5}},type:"if",locations:[{start:{line:29,column:4},end:{line:36,column:5}},{start:{line:29,column:4},end:{line:36,column:5}}],line:29},"1":{loc:{start:{line:31,column:6},end:{line:33,column:67}},type:"binary-expr",locations:[{start:{line:31,column:6},end:{line:31,column:67}},{start:{line:33,column:6},end:{line:33,column:67}}],line:31},"2":{loc:{start:{line:31,column:31},end:{line:31,column:66}},type:"binary-expr",locations:[{start:{line:31,column:31},end:{line:31,column:51}},{start:{line:31,column:55},end:{line:31,column:66}}],line:31},"3":{loc:{start:{line:33,column:27},end:{line:33,column:66}},type:"binary-expr",locations:[{start:{line:33,column:27},end:{line:33,column:49}},{start:{line:33,column:53},end:{line:33,column:66}}],line:33},"4":{loc:{start:{line:40,column:2},end:{line:49,column:3}},type:"if",locations:[{start:{line:40,column:2},end:{line:49,column:3}},{start:{line:40,column:2},end:{line:49,column:3}}],line:40},"5":{loc:{start:{line:42,column:4},end:{line:46,column:5}},type:"binary-expr",locations:[{start:{line:42,column:4},end:{line:42,column:80}},{start:{line:44,column:4},end:{line:46,column:5}}],line:42},"6":{loc:{start:{line:42,column:32},end:{line:42,column:79}},type:"binary-expr",locations:[{start:{line:42,column:32},end:{line:42,column:58}},{start:{line:42,column:62},end:{line:42,column:79}}],line:42},"7":{loc:{start:{line:45,column:22},end:{line:45,column:113}},type:"binary-expr",locations:[{start:{line:45,column:22},end:{line:45,column:76}},{start:{line:45,column:80},end:{line:45,column:113}}],line:45},"8":{loc:{start:{line:52,column:2},end:{line:74,column:3}},type:"if",locations:[{start:{line:52,column:2},end:{line:74,column:3}},{start:{line:52,column:2},end:{line:74,column:3}}],line:52},"9":{loc:{start:{line:56,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:63,column:5}},{start:{line:56,column:4},end:{line:63,column:5}}],line:56},"10":{loc:{start:{line:57,column:6},end:{line:60,column:46}},type:"binary-expr",locations:[{start:{line:57,column:6},end:{line:57,column:46}},{start:{line:58,column:6},end:{line:58,column:46}},{start:{line:59,column:6},end:{line:59,column:46}},{start:{line:60,column:6},end:{line:60,column:46}}],line:57},"11":{loc:{start:{line:66,column:4},end:{line:73,column:5}},type:"if",locations:[{start:{line:66,column:4},end:{line:73,column:5}},{start:{line:66,column:4},end:{line:73,column:5}}],line:66},"12":{loc:{start:{line:67,column:6},end:{line:70,column:34}},type:"binary-expr",locations:[{start:{line:67,column:6},end:{line:67,column:34}},{start:{line:68,column:6},end:{line:68,column:34}},{start:{line:69,column:6},end:{line:69,column:34}},{start:{line:70,column:6},end:{line:70,column:34}}],line:67},"13":{loc:{start:{line:85,column:2},end:{line:100,column:3}},type:"if",locations:[{start:{line:85,column:2},end:{line:100,column:3}},{start:{line:85,column:2},end:{line:100,column:3}}],line:85},"14":{loc:{start:{line:143,column:2},end:{line:175,column:3}},type:"if",locations:[{start:{line:143,column:2},end:{line:175,column:3}},{start:{line:143,column:2},end:{line:175,column:3}}],line:143},"15":{loc:{start:{line:143,column:6},end:{line:143,column:39}},type:"binary-expr",locations:[{start:{line:143,column:6},end:{line:143,column:28}},{start:{line:143,column:32},end:{line:143,column:39}}],line:143},"16":{loc:{start:{line:151,column:4},end:{line:169,column:5}},type:"if",locations:[{start:{line:151,column:4},end:{line:169,column:5}},{start:{line:151,column:4},end:{line:169,column:5}}],line:151},"17":{loc:{start:{line:151,column:8},end:{line:151,column:49}},type:"binary-expr",locations:[{start:{line:151,column:8},end:{line:151,column:15}},{start:{line:151,column:19},end:{line:151,column:30}},{start:{line:151,column:34},end:{line:151,column:49}}],line:151},"18":{loc:{start:{line:154,column:11},end:{line:169,column:5}},type:"if",locations:[{start:{line:154,column:11},end:{line:169,column:5}},{start:{line:154,column:11},end:{line:169,column:5}}],line:154},"19":{loc:{start:{line:156,column:22},end:{line:156,column:55}},type:"cond-expr",locations:[{start:{line:156,column:46},end:{line:156,column:49}},{start:{line:156,column:52},end:{line:156,column:55}}],line:156},"20":{loc:{start:{line:159,column:6},end:{line:163,column:7}},type:"if",locations:[{start:{line:159,column:6},end:{line:163,column:7}},{start:{line:159,column:6},end:{line:163,column:7}}],line:159}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c649560da664b8753ad0774585baa1781016175d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1vngzsz3fq=function(){return actualCoverage;};}return actualCoverage;}cov_1vngzsz3fq();// server.js
const express=(cov_1vngzsz3fq().s[0]++,require('express'));const bodyParser=(cov_1vngzsz3fq().s[1]++,require('body-parser'));const cors=(cov_1vngzsz3fq().s[2]++,require('cors'));const app=(cov_1vngzsz3fq().s[3]++,express());const port=(cov_1vngzsz3fq().s[4]++,5000);// Game Variables
let board=(cov_1vngzsz3fq().s[5]++,[['','',''],['','',''],['','','']]);let currentPlayer=(cov_1vngzsz3fq().s[6]++,'X');let winner=(cov_1vngzsz3fq().s[7]++,'');let scoreX=(cov_1vngzsz3fq().s[8]++,0);let scoreO=(cov_1vngzsz3fq().s[9]++,0);/**
 * Function to check for a winner on the game board.
 * @param {number} boardSize - Size of the game board (3 for 3x3 or 4 for 4x4).
 * @returns {string} - A string indicating the winner or an empty string if there is no winner.
 */cov_1vngzsz3fq().s[10]++;const checkWinner=boardSize=>{cov_1vngzsz3fq().f[0]++;cov_1vngzsz3fq().s[11]++;// Check rows and columns
for(let i=(cov_1vngzsz3fq().s[12]++,0);i<boardSize;i++){cov_1vngzsz3fq().s[13]++;if(// Check rows
(cov_1vngzsz3fq().b[1][0]++,board[i].every(cell=>{cov_1vngzsz3fq().f[1]++;cov_1vngzsz3fq().s[14]++;return(cov_1vngzsz3fq().b[2][0]++,cell===board[i][0])&&(cov_1vngzsz3fq().b[2][1]++,cell!=='');}))||(cov_1vngzsz3fq().b[1][1]++,// Check columns
board.every(row=>{cov_1vngzsz3fq().f[2]++;cov_1vngzsz3fq().s[15]++;return(cov_1vngzsz3fq().b[3][0]++,row[i]===board[0][i])&&(cov_1vngzsz3fq().b[3][1]++,row[i]!=='');}))){cov_1vngzsz3fq().b[0][0]++;cov_1vngzsz3fq().s[16]++;return`${board[i][i]} is the winner!`;// Include a message indicating the winner
}else{cov_1vngzsz3fq().b[0][1]++;}}// Check diagonals
cov_1vngzsz3fq().s[17]++;if(// Check main diagonal
(cov_1vngzsz3fq().b[5][0]++,board.every((row,index)=>{cov_1vngzsz3fq().f[3]++;cov_1vngzsz3fq().s[18]++;return(cov_1vngzsz3fq().b[6][0]++,row[index]===board[0][0])&&(cov_1vngzsz3fq().b[6][1]++,row[index]!=='');}))||(cov_1vngzsz3fq().b[5][1]++,// Check anti-diagonal
board.every((row,index)=>{cov_1vngzsz3fq().f[4]++;cov_1vngzsz3fq().s[19]++;return(cov_1vngzsz3fq().b[7][0]++,row[boardSize-1-index]===board[0][boardSize-1])&&(cov_1vngzsz3fq().b[7][1]++,row[boardSize-1-index]!=='');}))){cov_1vngzsz3fq().b[4][0]++;cov_1vngzsz3fq().s[20]++;return`${board[0][0]} is the winner!`;// Include a message indicating the winner
}else{cov_1vngzsz3fq().b[4][1]++;}// Check additional diagonals for the 4x4 board
cov_1vngzsz3fq().s[21]++;if(boardSize===4){cov_1vngzsz3fq().b[8][0]++;const centerSymbol=(cov_1vngzsz3fq().s[22]++,board[1][1]);// Check secondary diagonal
cov_1vngzsz3fq().s[23]++;if((cov_1vngzsz3fq().b[10][0]++,board[0][boardSize-1]===centerSymbol)&&(cov_1vngzsz3fq().b[10][1]++,board[1][boardSize-2]===centerSymbol)&&(cov_1vngzsz3fq().b[10][2]++,board[2][boardSize-3]===centerSymbol)&&(cov_1vngzsz3fq().b[10][3]++,board[3][boardSize-4]===centerSymbol)){cov_1vngzsz3fq().b[9][0]++;cov_1vngzsz3fq().s[24]++;return`${centerSymbol} is the winner!`;// Include a message indicating the winner
}else{cov_1vngzsz3fq().b[9][1]++;}// Check anti-secondary diagonal
cov_1vngzsz3fq().s[25]++;if((cov_1vngzsz3fq().b[12][0]++,board[0][0]===centerSymbol)&&(cov_1vngzsz3fq().b[12][1]++,board[1][1]===centerSymbol)&&(cov_1vngzsz3fq().b[12][2]++,board[2][2]===centerSymbol)&&(cov_1vngzsz3fq().b[12][3]++,board[3][3]===centerSymbol)){cov_1vngzsz3fq().b[11][0]++;cov_1vngzsz3fq().s[26]++;return`${centerSymbol} is the winner!`;// Include a message indicating the winner
}else{cov_1vngzsz3fq().b[11][1]++;}}else{cov_1vngzsz3fq().b[8][1]++;}cov_1vngzsz3fq().s[27]++;return'';};/**
 * Function to extend the game board from 3x3 to 4x4 when the 3x3 board is full.
 */cov_1vngzsz3fq().s[28]++;const extendBoard=()=>{cov_1vngzsz3fq().f[5]++;const is3x3BoardFull=(cov_1vngzsz3fq().s[29]++,board.every(row=>{cov_1vngzsz3fq().f[6]++;cov_1vngzsz3fq().s[30]++;return row.every(cell=>{cov_1vngzsz3fq().f[7]++;cov_1vngzsz3fq().s[31]++;return cell!=='';});}));cov_1vngzsz3fq().s[32]++;if(is3x3BoardFull){cov_1vngzsz3fq().b[13][0]++;// If the 3x3 board is full, extend to a 4x4 board
// Create a new 4x4 board with empty values
const newBoard=(cov_1vngzsz3fq().s[33]++,Array.from({length:4},()=>{cov_1vngzsz3fq().f[8]++;cov_1vngzsz3fq().s[34]++;return Array(4).fill('');}));// Copy the existing entries from the 3x3 board to the top-left corner of the new 4x4 board
cov_1vngzsz3fq().s[35]++;for(let i=(cov_1vngzsz3fq().s[36]++,0);i<3;i++){cov_1vngzsz3fq().s[37]++;for(let j=(cov_1vngzsz3fq().s[38]++,0);j<3;j++){cov_1vngzsz3fq().s[39]++;newBoard[i][j]=board[i][j];}}// Update the existing board with the new 4x4 board
cov_1vngzsz3fq().s[40]++;board=newBoard;}else{cov_1vngzsz3fq().b[13][1]++;}};/**
 * Function to reset the game by clearing the board and resetting player-related variables.
 */cov_1vngzsz3fq().s[41]++;const resetGame=()=>{cov_1vngzsz3fq().f[9]++;cov_1vngzsz3fq().s[42]++;board=[['','',''],['','',''],['','','']];cov_1vngzsz3fq().s[43]++;currentPlayer='X';cov_1vngzsz3fq().s[44]++;winner='';};// Middleware
cov_1vngzsz3fq().s[45]++;app.use(cors());cov_1vngzsz3fq().s[46]++;app.use(bodyParser.json());// Endpoints
/**
 * GET /board
 * Description: Retrieves the current state of the game board along with winner information and scores.
 */cov_1vngzsz3fq().s[47]++;app.get('/board',(req,res)=>{cov_1vngzsz3fq().f[10]++;cov_1vngzsz3fq().s[48]++;res.json({board,winner,scoreX,scoreO});});/**
 * POST /move
 * Description: Allows a player to make a move on the game board.
 * Request Body Parameters:
 *   - row: Row index where the player wants to make a move.
 *   - col: Column index where the player wants to make a move.
 */cov_1vngzsz3fq().s[49]++;app.post('/move',(req,res)=>{cov_1vngzsz3fq().f[11]++;const{row,col}=(cov_1vngzsz3fq().s[50]++,req.body);const boardSize=(cov_1vngzsz3fq().s[51]++,board.length);// Check if the move is valid
cov_1vngzsz3fq().s[52]++;if((cov_1vngzsz3fq().b[15][0]++,board[row][col]==='')&&(cov_1vngzsz3fq().b[15][1]++,!winner)){cov_1vngzsz3fq().b[14][0]++;cov_1vngzsz3fq().s[53]++;board[row][col]=currentPlayer;// Check for a winner
cov_1vngzsz3fq().s[54]++;winner=checkWinner(boardSize);// If no winner, check if the board is full
const isBoardFull=(cov_1vngzsz3fq().s[55]++,board.every(row=>{cov_1vngzsz3fq().f[12]++;cov_1vngzsz3fq().s[56]++;return row.every(cell=>{cov_1vngzsz3fq().f[13]++;cov_1vngzsz3fq().s[57]++;return cell!=='';});}));cov_1vngzsz3fq().s[58]++;if((cov_1vngzsz3fq().b[17][0]++,!winner)&&(cov_1vngzsz3fq().b[17][1]++,isBoardFull)&&(cov_1vngzsz3fq().b[17][2]++,boardSize===3)){cov_1vngzsz3fq().b[16][0]++;cov_1vngzsz3fq().s[59]++;// If the board is full, extend the board
extendBoard();}else{cov_1vngzsz3fq().b[16][1]++;cov_1vngzsz3fq().s[60]++;if(!winner){cov_1vngzsz3fq().b[18][0]++;cov_1vngzsz3fq().s[61]++;// Switch to the next player if there's no winner
currentPlayer=currentPlayer==='X'?(cov_1vngzsz3fq().b[19][0]++,'O'):(cov_1vngzsz3fq().b[19][1]++,'X');}else{cov_1vngzsz3fq().b[18][1]++;cov_1vngzsz3fq().s[62]++;// If there is a winner, update the scores and reset the game
if(winner==='X'){cov_1vngzsz3fq().b[20][0]++;cov_1vngzsz3fq().s[63]++;scoreX++;}else{cov_1vngzsz3fq().b[20][1]++;cov_1vngzsz3fq().s[64]++;scoreO++;}cov_1vngzsz3fq().s[65]++;resetGame();// Send the winner information in the response
cov_1vngzsz3fq().s[66]++;res.json({success:true,winner});cov_1vngzsz3fq().s[67]++;return;// Make sure to return here to prevent further execution
}}// Send a success response without winner information
cov_1vngzsz3fq().s[68]++;res.json({success:true});}else{cov_1vngzsz3fq().b[14][1]++;cov_1vngzsz3fq().s[69]++;res.status(400).json({success:false,message:'Invalid move'});}});/**
 * POST /reset
 * Description: Resets the game, clearing the board and resetting player scores.
 */cov_1vngzsz3fq().s[70]++;app.post('/reset',(req,res)=>{cov_1vngzsz3fq().f[14]++;cov_1vngzsz3fq().s[71]++;resetGame();cov_1vngzsz3fq().s[72]++;res.json({success:true});});cov_1vngzsz3fq().s[73]++;module.exports={server:app,port,checkWinner,extendBoard,resetGame};// const checkWinner = (boardSize) => {
//   // Check rows and columns
//   for (let i = 0; i < boardSize; i++) {
//     if (
//       // Check rows
//       board[i].every((cell) => cell === board[i][0] && cell !== '') ||
//       // Check columns
//       board.every((row) => row[i] === board[0][i] && row[i] !== '')
//     ) {
//       return `${board[i][i]} is the winner!`; // Include a message indicating the winner
//     }
//   }
//   // Check diagonals
//   if (
//     // Check main diagonal
//     board.every((row, index) => row[index] === board[0][0] && row[index] !== '') ||
//     // Check anti-diagonal
//     board.every((row, index) => row[boardSize - 1 - index] === board[0][boardSize - 1] && row[boardSize - 1 - index] !== '')
//   ) {
//     return `${board[0][0]} is the winner!`; // Include a message indicating the winner
//   }
//   // Check additional diagonals for the 4x4 board
//   if (boardSize === 4) {
//     if (
//       // Check secondary diagonal
//       board.every((row, index) => row[boardSize - 1 - index] === board[0][boardSize - 1] && row[boardSize - 1 - index] !== '') ||
//       // Check anti-secondary diagonal
//       board.every((row, index) => row[index] === board[0][0] && row[index] !== '')
//     ) {
//       return `${board[0][boardSize - 1]} is the winner!`; // Include a message indicating the winner
//     }
//   }
//   return '';
// };
// server.js
// const express = require('express');
// const bodyParser = require('body-parser');
// const cors = require('cors');
// const app = express();
// const port = 5000;
// app.use(cors());
// app.use(bodyParser.json());
// let board = [
//   ['', '', ''],
//   ['', '', ''],
//   ['', '', '']
// ];
// let currentPlayer = 'X';
// let winner = '';
// let scoreX = 0;
// let scoreO = 0;
// app.post('/move', (req, res) => {
//   const { row, col } = req.body;
//   const boardSize = board.length;
//   // Check if the move is valid
//   if (board[row][col] === '' && !winner) {
//     board[row][col] = currentPlayer;
//     // Check for a winner
//     winner = checkWinner(boardSize);
//     // If no winner, check if the board is full
//     const isBoardFull = board.every(row => row.every(cell => cell !== ''));
//     if (!winner && isBoardFull && boardSize === 3) {
//       // If the board is full, extend the board
//       extendBoard();
//     } else if (!winner) {
//       // Switch to the next player if there's no winner
//       currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
//     } else {
//       // If there is a winner, update the scores and reset the game
//       if (winner === 'X') {
//         scoreX++;
//       } else {
//         scoreO++;
//       }
//       resetGame();
//     }
//     res.json({ success: true });
//   } else {
//     res.status(400).json({ success: false, message: 'Invalid move' });
//   }
// });
// const checkWinner = (boardSize) => {
//   // Check rows and columns
//   for (let i = 0; i < boardSize; i++) {
//     if (
//       // Check rows
//       board[i].every((cell) => cell === board[i][0] && cell !== '') ||
//       // Check columns
//       board.every((row) => row[i] === board[0][i] && row[i] !== '')
//     ) {
//       return `${board[i][i]} is the winner!`; // Include a message indicating the winner
//     }
//   }
//   // Check diagonals
//   if (
//     // Check main diagonal
//     board.every((row, index) => row[index] === board[0][0] && row[index] !== '') ||
//     // Check anti-diagonal
//     board.every((row, index) => row[boardSize - 1 - index] === board[0][boardSize - 1] && row[boardSize - 1 - index] !== '')
//   ) {
//     return `${board[0][0]} is the winner!`; // Include a message indicating the winner
//   }
//   // Check additional diagonals for the 4x4 board
//   if (boardSize === 4) {
//     if (
//       // Check secondary diagonal
//       board.every((row, index) => row[boardSize - 1 - index] === board[0][boardSize - 1] && row[boardSize - 1 - index] !== '') ||
//       // Check anti-secondary diagonal
//       board.every((row, index) => row[index] === board[0][0] && row[index] !== '')
//     ) {
//       return `${board[0][boardSize - 1]} is the winner!`; // Include a message indicating the winner
//     }
//   }
//   return '';
// };
// // Function to extend the board
// const extendBoard = () => {
//   const is3x3BoardFull = board.every(row => row.every(cell => cell !== ''));
//   if (is3x3BoardFull) {
//     // If the 3x3 board is full, extend to a 4x4 board
//     // Create a new 4x4 board with empty values
//     const newBoard = Array.from({ length: 4 }, () => Array(4).fill(''));
//     // Copy the existing entries from the 3x3 board to the top-left corner of the new 4x4 board
//     for (let i = 0; i < 3; i++) {
//       for (let j = 0; j < 3; j++) {
//         newBoard[i][j] = board[i][j];
//       }
//     }
//     // Update the existing board with the new 4x4 board
//     board = newBoard;
//   }
// };
// // Function to reset the game
// const resetGame = () => {
//   board = [
//     ['', '', ''],
//     ['', '', ''],
//     ['', '', '']
//   ];
//   currentPlayer = 'X';
//   winner = '';
// };
// app.get('/board', (req, res) => {
//   res.json({ board, winner, scoreX, scoreO });
// });
// app.post('/move', (req, res) => {
//   const { row, col } = req.body;
//   const boardSize = board.length;
//   // Check if the move is valid
//   if (board[row][col] === '' && !winner) {
//     board[row][col] = currentPlayer;
//     // Check for a winner
//     winner = checkWinner(boardSize);
//     // If no winner, check if the board is full
//     const isBoardFull = board.every(row => row.every(cell => cell !== ''));
//     if (!winner && isBoardFull && boardSize==3) {
//       // If the board is full, extend the board
//       extendBoard();
//     } else if (!winner) {
//       // Switch to the next player if there's no winner
//       currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
//     } else {
//       // If there is a winner, update the scores and reset the game
//       if (winner === 'X') {
//         scoreX++;
//       } else {
//         scoreO++;
//       }
//       resetGame();
//     }
//     res.json({ success: true });
//   } else {
//     res.status(400).json({ success: false, message: 'Invalid move' });
//   }
// });
// app.post('/reset', (req, res) => {
//   resetGame();
//   res.json({ success: true });
// });
// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });
// const checkWinner = (boardSize) => {
//   // Check rows and columns
//   for (let i = 0; i < boardSize; i++) {
//     if (
//       // Check rows
//       board[i].every((cell) => cell === board[i][0] && cell !== '') ||
//       // Check columns
//       board.every((row) => row[i] === board[0][i] && row[i] !== '')
//     ) {
//       return board[i][i];
//     }
//   }
//   // Check diagonals
//   if (
//     // Check main diagonal
//     board.every((row, index) => row[index] === board[0][0] && row[index] !== '') ||
//     // Check anti-diagonal
//     board.every((row, index) => row[boardSize - 1 - index] === board[0][boardSize - 1] && row[boardSize - 1 - index] !== '')
//   ) {
//     return board[0][boardSize - 1];
//   }
//   return '';
// };
// Function to extend the board
// const extendBoard = () => {
//   const corner = Math.floor(Math.random() * 4);
//   console.log("Corner", corner);
//   switch (corner) {
//     case 0:
//       board.unshift(['', '', '']);
//       break;
//     case 1:
//       board.push(['', '', '']);
//       break;
//     case 2:
//       board.forEach(row => row.unshift(''));
//       break;
//     case 3:
//       board.forEach(row => row.push(''));
//       break;
//     default:
//       break;
//   }
// };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,